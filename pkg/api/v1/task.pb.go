// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Task_Protocol int32

const (
	Task_TCP  Task_Protocol = 0
	Task_HTTP Task_Protocol = 1
	Task_GRPC Task_Protocol = 2
	Task_UDP  Task_Protocol = 3
)

var Task_Protocol_name = map[int32]string{
	0: "TCP",
	1: "HTTP",
	2: "GRPC",
	3: "UDP",
}

var Task_Protocol_value = map[string]int32{
	"TCP":  0,
	"HTTP": 1,
	"GRPC": 2,
	"UDP":  3,
}

func (x Task_Protocol) String() string {
	return proto.EnumName(Task_Protocol_name, int32(x))
}

func (Task_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{0, 0}
}

type ReadAllRequest_Protocol int32

const (
	ReadAllRequest_TCP  ReadAllRequest_Protocol = 0
	ReadAllRequest_HTTP ReadAllRequest_Protocol = 1
	ReadAllRequest_GRPC ReadAllRequest_Protocol = 2
	ReadAllRequest_UDP  ReadAllRequest_Protocol = 3
)

var ReadAllRequest_Protocol_name = map[int32]string{
	0: "TCP",
	1: "HTTP",
	2: "GRPC",
	3: "UDP",
}

var ReadAllRequest_Protocol_value = map[string]int32{
	"TCP":  0,
	"HTTP": 1,
	"GRPC": 2,
	"UDP":  3,
}

func (x ReadAllRequest_Protocol) String() string {
	return proto.EnumName(ReadAllRequest_Protocol_name, int32(x))
}

func (ReadAllRequest_Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{9, 0}
}

// Generic Interaction Task
type Task struct {
	// Unique integer identifier of the task
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Title of the task
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Detail description of the task
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// type of task
	Protocol Task_Protocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=v1.Task_Protocol" json:"protocol,omitempty"`
	// Date and time to remind the task
	Reminder             *timestamp.Timestamp `protobuf:"bytes,5,opt,name=reminder,proto3" json:"reminder,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{0}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetProtocol() Task_Protocol {
	if m != nil {
		return m.Protocol
	}
	return Task_TCP
}

func (m *Task) GetReminder() *timestamp.Timestamp {
	if m != nil {
		return m.Reminder
	}
	return nil
}

// Request data to create new task
type CreateRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity to add
	Task                 *Task    `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateRequest) Reset()         { *m = CreateRequest{} }
func (m *CreateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()    {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{1}
}

func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateRequest.Unmarshal(m, b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return xxx_messageInfo_CreateRequest.Size(m)
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *CreateRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

// Contains data of created  task
type CreateResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// ID of created task
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateResponse) Reset()         { *m = CreateResponse{} }
func (m *CreateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()    {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{2}
}

func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateResponse.Unmarshal(m, b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return xxx_messageInfo_CreateResponse.Size(m)
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *CreateResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Request data to read task
type ReadRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Unique integer identifier of the task
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadRequest) Reset()         { *m = ReadRequest{} }
func (m *ReadRequest) String() string { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()    {}
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{3}
}

func (m *ReadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadRequest.Unmarshal(m, b)
}
func (m *ReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadRequest.Marshal(b, m, deterministic)
}
func (m *ReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRequest.Merge(m, src)
}
func (m *ReadRequest) XXX_Size() int {
	return xxx_messageInfo_ReadRequest.Size(m)
}
func (m *ReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRequest proto.InternalMessageInfo

func (m *ReadRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Contains task data specified in by ID request
type ReadResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity read by ID
	Task                 *Task    `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadResponse) Reset()         { *m = ReadResponse{} }
func (m *ReadResponse) String() string { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()    {}
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{4}
}

func (m *ReadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadResponse.Unmarshal(m, b)
}
func (m *ReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadResponse.Marshal(b, m, deterministic)
}
func (m *ReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadResponse.Merge(m, src)
}
func (m *ReadResponse) XXX_Size() int {
	return xxx_messageInfo_ReadResponse.Size(m)
}
func (m *ReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadResponse proto.InternalMessageInfo

func (m *ReadResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadResponse) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

// Request data to update task
type UpdateRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Task entity to update
	Task                 *Task    `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateRequest) Reset()         { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()    {}
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{5}
}

func (m *UpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRequest.Unmarshal(m, b)
}
func (m *UpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRequest.Merge(m, src)
}
func (m *UpdateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateRequest.Size(m)
}
func (m *UpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRequest proto.InternalMessageInfo

func (m *UpdateRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *UpdateRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

// Contains status of update operation
type UpdateResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Contains number of entities have beed updated
	// Equals 1 in case of succesfull update
	Updated              int64    `protobuf:"varint,2,opt,name=updated,proto3" json:"updated,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateResponse) Reset()         { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()    {}
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{6}
}

func (m *UpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateResponse.Unmarshal(m, b)
}
func (m *UpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateResponse.Marshal(b, m, deterministic)
}
func (m *UpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateResponse.Merge(m, src)
}
func (m *UpdateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateResponse.Size(m)
}
func (m *UpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateResponse proto.InternalMessageInfo

func (m *UpdateResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *UpdateResponse) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

// Request data to delete task
type DeleteRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Unique integer identifier of the task to delete
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{7}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *DeleteRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Contains status of delete operation
type DeleteResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// Contains number of entities have beed deleted
	// Equals 1 in case of succesfull delete
	Deleted              int64    `protobuf:"varint,2,opt,name=deleted,proto3" json:"deleted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{8}
}

func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteResponse.Unmarshal(m, b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteResponse.Size(m)
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func (m *DeleteResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *DeleteResponse) GetDeleted() int64 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

// Request data to read all task
type ReadAllRequest struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// type of task
	Protocol             ReadAllRequest_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=v1.ReadAllRequest_Protocol" json:"protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ReadAllRequest) Reset()         { *m = ReadAllRequest{} }
func (m *ReadAllRequest) String() string { return proto.CompactTextString(m) }
func (*ReadAllRequest) ProtoMessage()    {}
func (*ReadAllRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{9}
}

func (m *ReadAllRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadAllRequest.Unmarshal(m, b)
}
func (m *ReadAllRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadAllRequest.Marshal(b, m, deterministic)
}
func (m *ReadAllRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAllRequest.Merge(m, src)
}
func (m *ReadAllRequest) XXX_Size() int {
	return xxx_messageInfo_ReadAllRequest.Size(m)
}
func (m *ReadAllRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAllRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAllRequest proto.InternalMessageInfo

func (m *ReadAllRequest) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadAllRequest) GetProtocol() ReadAllRequest_Protocol {
	if m != nil {
		return m.Protocol
	}
	return ReadAllRequest_TCP
}

// Contains list of all tasks
type ReadAllResponse struct {
	// API versioning: it is my best practice to specify version explicitly
	Api string `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	// List of all tasks
	Task                 []*Task  `protobuf:"bytes,2,rep,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadAllResponse) Reset()         { *m = ReadAllResponse{} }
func (m *ReadAllResponse) String() string { return proto.CompactTextString(m) }
func (*ReadAllResponse) ProtoMessage()    {}
func (*ReadAllResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce5d8dd45b4a91ff, []int{10}
}

func (m *ReadAllResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadAllResponse.Unmarshal(m, b)
}
func (m *ReadAllResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadAllResponse.Marshal(b, m, deterministic)
}
func (m *ReadAllResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAllResponse.Merge(m, src)
}
func (m *ReadAllResponse) XXX_Size() int {
	return xxx_messageInfo_ReadAllResponse.Size(m)
}
func (m *ReadAllResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAllResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAllResponse proto.InternalMessageInfo

func (m *ReadAllResponse) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *ReadAllResponse) GetTask() []*Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func init() {
	proto.RegisterEnum("v1.Task_Protocol", Task_Protocol_name, Task_Protocol_value)
	proto.RegisterEnum("v1.ReadAllRequest_Protocol", ReadAllRequest_Protocol_name, ReadAllRequest_Protocol_value)
	proto.RegisterType((*Task)(nil), "v1.Task")
	proto.RegisterType((*CreateRequest)(nil), "v1.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "v1.CreateResponse")
	proto.RegisterType((*ReadRequest)(nil), "v1.ReadRequest")
	proto.RegisterType((*ReadResponse)(nil), "v1.ReadResponse")
	proto.RegisterType((*UpdateRequest)(nil), "v1.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "v1.UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "v1.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "v1.DeleteResponse")
	proto.RegisterType((*ReadAllRequest)(nil), "v1.ReadAllRequest")
	proto.RegisterType((*ReadAllResponse)(nil), "v1.ReadAllResponse")
}

func init() { proto.RegisterFile("task.proto", fileDescriptor_ce5d8dd45b4a91ff) }

var fileDescriptor_ce5d8dd45b4a91ff = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x18, 0xbd, 0xb6, 0xd3, 0x24, 0xfd, 0xf2, 0xd3, 0xdc, 0x69, 0xef, 0x25, 0x0a, 0x95, 0xb0, 0xbc,
	0x8a, 0x22, 0x6a, 0x27, 0xa6, 0x2a, 0x52, 0xa8, 0x68, 0x4b, 0x2b, 0xe8, 0x32, 0x32, 0xe9, 0x06,
	0x89, 0x85, 0x63, 0x0f, 0xce, 0xb4, 0x8e, 0xc7, 0x78, 0x26, 0x29, 0x08, 0x75, 0xc3, 0x1e, 0x09,
	0xc1, 0x8e, 0xd7, 0x61, 0xc1, 0x03, 0xf0, 0x0a, 0x48, 0xbc, 0x06, 0xf2, 0xd8, 0x4e, 0xeb, 0xa6,
	0xa9, 0x10, 0xac, 0xec, 0xf9, 0xe6, 0x7c, 0xe7, 0x9c, 0x6f, 0xe6, 0xd8, 0x00, 0xdc, 0x66, 0x67,
	0x7a, 0x18, 0x51, 0x4e, 0x91, 0x3c, 0xeb, 0xb5, 0xee, 0x79, 0x94, 0x7a, 0x3e, 0x36, 0x44, 0x65,
	0x34, 0x7d, 0x65, 0x70, 0x32, 0xc1, 0x8c, 0xdb, 0x93, 0x30, 0x01, 0xb5, 0x36, 0x53, 0x80, 0x1d,
	0x12, 0xc3, 0x0e, 0x02, 0xca, 0x6d, 0x4e, 0x68, 0xc0, 0xd2, 0xdd, 0xfb, 0xe2, 0xe1, 0x6c, 0x79,
	0x38, 0xd8, 0x62, 0xe7, 0xb6, 0xe7, 0xe1, 0xc8, 0xa0, 0xa1, 0x40, 0x2c, 0xa2, 0xb5, 0x9f, 0x12,
	0x14, 0x86, 0x36, 0x3b, 0x43, 0x75, 0x90, 0x89, 0xdb, 0x94, 0x54, 0xa9, 0xad, 0x58, 0x32, 0x71,
	0xd1, 0x06, 0xac, 0x70, 0xc2, 0x7d, 0xdc, 0x94, 0x55, 0xa9, 0xbd, 0x6a, 0x25, 0x0b, 0xa4, 0x42,
	0xc5, 0xc5, 0xcc, 0x89, 0x88, 0x20, 0x6c, 0x2a, 0x62, 0xef, 0x6a, 0x09, 0x6d, 0x41, 0x39, 0x31,
	0x40, 0xfd, 0x66, 0x41, 0x95, 0xda, 0x75, 0xf3, 0x5f, 0x7d, 0xd6, 0xd3, 0x63, 0x0d, 0x7d, 0x90,
	0x6e, 0x58, 0x73, 0x08, 0xda, 0x81, 0x72, 0x84, 0x27, 0x24, 0x70, 0x71, 0xd4, 0x5c, 0x51, 0xa5,
	0x76, 0xc5, 0x6c, 0xe9, 0xc9, 0x78, 0x7a, 0x36, 0xbf, 0x3e, 0xcc, 0xe6, 0xb7, 0xe6, 0x58, 0xad,
	0x0b, 0xe5, 0x8c, 0x0d, 0x95, 0x40, 0x19, 0x1e, 0x0e, 0x1a, 0xff, 0xa0, 0x32, 0x14, 0x8e, 0x87,
	0xc3, 0x41, 0x43, 0x8a, 0xdf, 0x9e, 0x59, 0x83, 0xc3, 0x86, 0x1c, 0x6f, 0x9e, 0x1c, 0x0d, 0x1a,
	0x8a, 0xb6, 0x07, 0xb5, 0xc3, 0x08, 0xdb, 0x1c, 0x5b, 0xf8, 0xf5, 0x14, 0x33, 0x8e, 0x1a, 0xa0,
	0xd8, 0x21, 0x11, 0x23, 0xaf, 0x5a, 0xf1, 0x2b, 0xda, 0x84, 0x42, 0x7c, 0x17, 0x62, 0xe4, 0x8a,
	0x59, 0xce, 0x7c, 0x5b, 0xa2, 0xaa, 0x99, 0x50, 0xcf, 0x08, 0x58, 0x48, 0x03, 0x86, 0x6f, 0x60,
	0x48, 0x4e, 0x51, 0xce, 0x4e, 0x51, 0x33, 0xa0, 0x62, 0x61, 0xdb, 0x5d, 0x2e, 0x79, 0xbd, 0xe1,
	0x31, 0x54, 0x93, 0x86, 0xa5, 0x12, 0xb7, 0x9b, 0xdc, 0x83, 0xda, 0x49, 0xe8, 0xfe, 0xc5, 0x94,
	0xbb, 0x50, 0xcf, 0x08, 0x96, 0x5a, 0x68, 0x42, 0x69, 0x2a, 0x30, 0x99, 0xf3, 0x6c, 0xa9, 0xf5,
	0xa0, 0x76, 0x84, 0x7d, 0x7c, 0x9b, 0xfc, 0xf5, 0x89, 0x77, 0xa1, 0x9e, 0xb5, 0xdc, 0x26, 0xe8,
	0x0a, 0xcc, 0x5c, 0x30, 0x5d, 0x6a, 0x1f, 0x24, 0xa8, 0xc7, 0x07, 0x76, 0xe0, 0xfb, 0xcb, 0x25,
	0x1f, 0x5e, 0xc9, 0xa4, 0x2c, 0x32, 0x79, 0x37, 0x9e, 0x3a, 0xdf, 0x77, 0x43, 0x3a, 0xff, 0x20,
	0x65, 0x07, 0xb0, 0x36, 0xa7, 0xfd, 0x8d, 0x2b, 0x54, 0x16, 0x6f, 0xc0, 0xfc, 0xa8, 0x40, 0x25,
	0x5e, 0x3e, 0xc7, 0xd1, 0x8c, 0x38, 0x18, 0x1d, 0x43, 0x29, 0xa5, 0x44, 0x68, 0xd1, 0x76, 0x6b,
	0x3d, 0x57, 0x4b, 0x34, 0xb5, 0x8d, 0xf7, 0xdf, 0x7f, 0x7c, 0x96, 0xeb, 0xa8, 0x6a, 0xcc, 0x7a,
	0x46, 0xcc, 0x6a, 0xd8, 0xbe, 0x8f, 0x8e, 0xa0, 0x98, 0x24, 0x18, 0x89, 0x6f, 0x32, 0xf7, 0x39,
	0xb4, 0xd0, 0xd5, 0x52, 0x4a, 0xb3, 0x2e, 0x68, 0x6a, 0x5a, 0x39, 0xa3, 0xe9, 0x4b, 0x1d, 0xb4,
	0x0f, 0x85, 0x58, 0x0e, 0xad, 0x65, 0xc2, 0x19, 0x43, 0xe3, 0xb2, 0x90, 0xf6, 0xff, 0x27, 0xfa,
	0xd7, 0x50, 0x6d, 0x6e, 0xe3, 0x1d, 0x71, 0x2f, 0x90, 0x07, 0xc5, 0x24, 0x63, 0x89, 0x8f, 0x5c,
	0x60, 0x13, 0x1f, 0xf9, 0x08, 0x6a, 0x3b, 0x82, 0xa7, 0xdb, 0x42, 0x97, 0x3c, 0xe2, 0xa7, 0x49,
	0xdc, 0x8b, 0xbe, 0xd4, 0x79, 0x71, 0xc7, 0xbc, 0x79, 0x03, 0x3d, 0x85, 0x62, 0x92, 0xad, 0x44,
	0x28, 0x17, 0xcd, 0x44, 0x28, 0x1f, 0xbd, 0xcc, 0x70, 0x27, 0x6f, 0xf8, 0xc9, 0x37, 0xe9, 0xd3,
	0xc1, 0x57, 0x09, 0xbd, 0x84, 0x6a, 0x7c, 0x31, 0x6a, 0x7a, 0x33, 0xda, 0x31, 0x54, 0xb1, 0x33,
	0xa6, 0x6a, 0x18, 0xd1, 0x53, 0xec, 0x70, 0xa4, 0x8e, 0x39, 0x0f, 0x59, 0xdf, 0x30, 0x3c, 0xc2,
	0xc7, 0xd3, 0x91, 0xee, 0xd0, 0x89, 0xe1, 0xd0, 0x99, 0x1d, 0x11, 0xfe, 0xd6, 0x88, 0x91, 0xad,
	0xff, 0x47, 0x38, 0xd0, 0xf1, 0x88, 0x9d, 0xd3, 0x88, 0x8f, 0xf7, 0xbd, 0x89, 0x4d, 0xfc, 0x18,
	0x65, 0x2a, 0x3d, 0xbd, 0xdb, 0x91, 0x24, 0xb3, 0x61, 0x87, 0xa1, 0x4f, 0x1c, 0xf1, 0x8b, 0x36,
	0x4e, 0x19, 0x0d, 0xfa, 0x0b, 0x15, 0xeb, 0x11, 0x28, 0xdb, 0xdd, 0x6d, 0xb4, 0x0d, 0x1d, 0x0b,
	0xf3, 0x69, 0x14, 0x60, 0x57, 0x3d, 0x1f, 0xe3, 0x40, 0xe5, 0x63, 0xac, 0x46, 0x98, 0xd1, 0x69,
	0xe4, 0x60, 0xd5, 0xa5, 0x98, 0xa9, 0x01, 0xe5, 0x2a, 0x7e, 0x43, 0x18, 0xd7, 0x51, 0x11, 0x0a,
	0x5f, 0x64, 0xa9, 0x34, 0x2a, 0x8a, 0x6c, 0x3f, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff, 0x31, 0x5b,
	0xeb, 0x01, 0x75, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskServiceClient interface {
	// Read all tasks
	ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error)
	// Create new task
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Read task
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error)
	// Update task
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Delete task
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) ReadAll(ctx context.Context, in *ReadAllRequest, opts ...grpc.CallOption) (*ReadAllResponse, error) {
	out := new(ReadAllResponse)
	err := c.cc.Invoke(ctx, "/v1.TaskService/ReadAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/v1.TaskService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadResponse, error) {
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, "/v1.TaskService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/v1.TaskService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/v1.TaskService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
type TaskServiceServer interface {
	// Read all tasks
	ReadAll(context.Context, *ReadAllRequest) (*ReadAllResponse, error)
	// Create new task
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Read task
	Read(context.Context, *ReadRequest) (*ReadResponse, error)
	// Update task
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	// Delete task
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// UnimplementedTaskServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServiceServer struct {
}

func (*UnimplementedTaskServiceServer) ReadAll(ctx context.Context, req *ReadAllRequest) (*ReadAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAll not implemented")
}
func (*UnimplementedTaskServiceServer) Create(ctx context.Context, req *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedTaskServiceServer) Read(ctx context.Context, req *ReadRequest) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedTaskServiceServer) Update(ctx context.Context, req *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedTaskServiceServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_ReadAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ReadAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TaskService/ReadAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ReadAll(ctx, req.(*ReadAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TaskService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TaskService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TaskService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TaskService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAll",
			Handler:    _TaskService_ReadAll_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TaskService_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _TaskService_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TaskService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TaskService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
