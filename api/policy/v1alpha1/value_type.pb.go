// Code generated by protoc-gen-go. DO NOT EDIT.
// source: value_type.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ValueType describes the types that values in the Echo system can take. These
// are used to describe the type of Attributes at run time, describe the type of
// the result of evaluating an expression, and to describe the runtime type of
// fields of other descriptors.
type ValueType int32

const (
	// Invalid, default value.
	ValueType_VALUE_TYPE_UNSPECIFIED ValueType = 0
	// An undiscriminated variable-length string.
	ValueType_STRING ValueType = 1
	// An undiscriminated 64-bit signed integer.
	ValueType_INT64 ValueType = 2
	// An undiscriminated 64-bit floating-point value.
	ValueType_DOUBLE ValueType = 3
	// An undiscriminated boolean value.
	ValueType_BOOL ValueType = 4
	// A point in time.
	ValueType_TIMESTAMP ValueType = 5
	// An IP address.
	ValueType_IP_ADDRESS ValueType = 6
	// An email address.
	ValueType_EMAIL_ADDRESS ValueType = 7
	// A URI.
	ValueType_URI ValueType = 8
	// A DNS name.
	ValueType_DNS_NAME ValueType = 9
	// A span between two points in time.
	ValueType_DURATION ValueType = 10
	// A map string -> string, typically used by headers.
	ValueType_STRING_MAP ValueType = 11
)

var ValueType_name = map[int32]string{
	0:  "VALUE_TYPE_UNSPECIFIED",
	1:  "STRING",
	2:  "INT64",
	3:  "DOUBLE",
	4:  "BOOL",
	5:  "TIMESTAMP",
	6:  "IP_ADDRESS",
	7:  "EMAIL_ADDRESS",
	8:  "URI",
	9:  "DNS_NAME",
	10: "DURATION",
	11: "STRING_MAP",
}

var ValueType_value = map[string]int32{
	"VALUE_TYPE_UNSPECIFIED": 0,
	"STRING":                 1,
	"INT64":                  2,
	"DOUBLE":                 3,
	"BOOL":                   4,
	"TIMESTAMP":              5,
	"IP_ADDRESS":             6,
	"EMAIL_ADDRESS":          7,
	"URI":                    8,
	"DNS_NAME":               9,
	"DURATION":               10,
	"STRING_MAP":             11,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}

func (ValueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a086a4ed03b1b2d5, []int{0}
}

func init() {
	proto.RegisterEnum("echo.policy.v1alpha1.ValueType", ValueType_name, ValueType_value)
}

func init() {
	proto.RegisterFile("value_type.proto", fileDescriptor_a086a4ed03b1b2d5)
}

var fileDescriptor_a086a4ed03b1b2d5 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0x86, 0x9d, 0xdb, 0xba, 0xf6, 0xe8, 0xe4, 0x18, 0xc4, 0x0b, 0x1f, 0x41, 0xa4, 0x65, 0x28,
	0xde, 0xa7, 0x36, 0x4a, 0xa0, 0x4d, 0x4b, 0x93, 0x0e, 0xf4, 0x26, 0x74, 0xa5, 0xd8, 0x42, 0x25,
	0x61, 0x74, 0x85, 0x3e, 0x9b, 0x2f, 0x27, 0xdd, 0x70, 0x97, 0xe7, 0xe3, 0xf0, 0xf3, 0x7f, 0x3f,
	0xe0, 0x50, 0x76, 0x87, 0x5a, 0xf7, 0xa3, 0xad, 0x7d, 0xbb, 0x37, 0xbd, 0x21, 0x77, 0x75, 0xd5,
	0x18, 0xdf, 0x9a, 0xae, 0xad, 0x46, 0x7f, 0xd8, 0x94, 0x9d, 0x6d, 0xca, 0xcd, 0xe3, 0xef, 0x0c,
	0xbc, 0xed, 0xf4, 0xaa, 0x46, 0x5b, 0x93, 0x07, 0xb8, 0xdf, 0xd2, 0xb8, 0x60, 0x5a, 0x7d, 0x66,
	0x4c, 0x17, 0x42, 0x66, 0xec, 0x8d, 0xbf, 0x73, 0x16, 0xe1, 0x05, 0x01, 0x70, 0xa4, 0xca, 0xb9,
	0xf8, 0xc0, 0x19, 0xf1, 0x60, 0xc9, 0x85, 0x7a, 0x7d, 0xc1, 0xcb, 0x09, 0x47, 0x69, 0x11, 0xc6,
	0x0c, 0xe7, 0xc4, 0x85, 0x45, 0x98, 0xa6, 0x31, 0x2e, 0xc8, 0x1a, 0x3c, 0xc5, 0x13, 0x26, 0x15,
	0x4d, 0x32, 0x5c, 0x92, 0x1b, 0x00, 0x9e, 0x69, 0x1a, 0x45, 0x39, 0x93, 0x12, 0x1d, 0x72, 0x0b,
	0x6b, 0x96, 0x50, 0x1e, 0x9f, 0xd1, 0x8a, 0xac, 0x60, 0x5e, 0xe4, 0x1c, 0x5d, 0x72, 0x0d, 0x6e,
	0x24, 0xa4, 0x16, 0x34, 0x61, 0xe8, 0x1d, 0xaf, 0x22, 0xa7, 0x8a, 0xa7, 0x02, 0x61, 0xca, 0x39,
	0x75, 0xd0, 0x09, 0xcd, 0xf0, 0x2a, 0xf4, 0xbf, 0x9e, 0xbe, 0xdb, 0xbe, 0x39, 0xec, 0xfc, 0xca,
	0xfc, 0x04, 0x95, 0x19, 0xca, 0x7d, 0xdb, 0x8f, 0xc1, 0x64, 0x1a, 0x94, 0xb6, 0x0d, 0x4e, 0xb6,
	0xc1, 0xbf, 0xed, 0xce, 0x39, 0x4e, 0xf1, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x80, 0xe4,
	0x54, 0x1e, 0x01, 0x00, 0x00,
}
