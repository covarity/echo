// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: extensions.proto

package v1

import (
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The available varieties of templates, controlling the semantics of what an adapter does with each instance.
type TemplateVariety int32

const (
	// Makes the template applicable for Echo's synthetic request calls.
	TemplateVariety_TEMPLATE_VARIETY_REQUEST TemplateVariety = 0
	// Makes the template applicable for Echo's synthetic request calls.
	TemplateVariety_TEMPLATE_VARIETY_CHECK TemplateVariety = 1
	// Makes the template applicable for Echo's synthetic request calls.
	TemplateVariety_TEMPLATE_VARIETY_PERFORMANCE TemplateVariety = 2
)

// Enum value maps for TemplateVariety.
var (
	TemplateVariety_name = map[int32]string{
		0: "TEMPLATE_VARIETY_REQUEST",
		1: "TEMPLATE_VARIETY_CHECK",
		2: "TEMPLATE_VARIETY_PERFORMANCE",
	}
	TemplateVariety_value = map[string]int32{
		"TEMPLATE_VARIETY_REQUEST":     0,
		"TEMPLATE_VARIETY_CHECK":       1,
		"TEMPLATE_VARIETY_PERFORMANCE": 2,
	}
)

func (x TemplateVariety) Enum() *TemplateVariety {
	p := new(TemplateVariety)
	*p = x
	return p
}

func (x TemplateVariety) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateVariety) Descriptor() protoreflect.EnumDescriptor {
	return file_extensions_proto_enumTypes[0].Descriptor()
}

func (TemplateVariety) Type() protoreflect.EnumType {
	return &file_extensions_proto_enumTypes[0]
}

func (x TemplateVariety) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateVariety.Descriptor instead.
func (TemplateVariety) EnumDescriptor() ([]byte, []int) {
	return file_extensions_proto_rawDescGZIP(), []int{0}
}

var file_extensions_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.FileOptions)(nil),
		ExtensionType: (*TemplateVariety)(nil),
		Field:         72295727,
		Name:          "adapter.model.v1.template_variety",
		Tag:           "varint,72295727,opt,name=template_variety,enum=adapter.model.v1.TemplateVariety",
		Filename:      "extensions.proto",
	},
	{
		ExtendedType:  (*descriptor.FileOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         72295888,
		Name:          "adapter.model.v1.template_name",
		Tag:           "bytes,72295888,opt,name=template_name",
		Filename:      "extensions.proto",
	},
}

// Extension fields to descriptor.FileOptions.
var (
	// Required: option for the TemplateVariety.
	//
	// optional adapter.model.v1.TemplateVariety template_variety = 72295727;
	E_TemplateVariety = &file_extensions_proto_extTypes[0]
	// Optional: option for the template name.
	// If not specified, the last segment of the template proto's package name is used to
	// derive the template name.
	//
	// optional string template_name = 72295888;
	E_TemplateName = &file_extensions_proto_extTypes[1]
)

var File_extensions_proto protoreflect.FileDescriptor

var file_extensions_proto_rawDesc = []byte{
	0x0a, 0x10, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0x6d, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x4d,
	0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x45, 0x4d, 0x50, 0x4c,
	0x41, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43,
	0x4b, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x56, 0x41, 0x52, 0x49, 0x45, 0x54, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x4e, 0x43, 0x45, 0x10, 0x02, 0x3a, 0x6d, 0x0a, 0x10, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x65, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xaf, 0xca, 0xbc, 0x22, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69,
	0x65, 0x74, 0x79, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72,
	0x69, 0x65, 0x74, 0x79, 0x3a, 0x44, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xd0, 0xcb, 0xbc, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_extensions_proto_rawDescOnce sync.Once
	file_extensions_proto_rawDescData = file_extensions_proto_rawDesc
)

func file_extensions_proto_rawDescGZIP() []byte {
	file_extensions_proto_rawDescOnce.Do(func() {
		file_extensions_proto_rawDescData = protoimpl.X.CompressGZIP(file_extensions_proto_rawDescData)
	})
	return file_extensions_proto_rawDescData
}

var file_extensions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_extensions_proto_goTypes = []interface{}{
	(TemplateVariety)(0),           // 0: adapter.model.v1.TemplateVariety
	(*descriptor.FileOptions)(nil), // 1: google.protobuf.FileOptions
}
var file_extensions_proto_depIdxs = []int32{
	1, // 0: adapter.model.v1.template_variety:extendee -> google.protobuf.FileOptions
	1, // 1: adapter.model.v1.template_name:extendee -> google.protobuf.FileOptions
	0, // 2: adapter.model.v1.template_variety:type_name -> adapter.model.v1.TemplateVariety
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	2, // [2:3] is the sub-list for extension type_name
	0, // [0:2] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_extensions_proto_init() }
func file_extensions_proto_init() {
	if File_extensions_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_extensions_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 2,
			NumServices:   0,
		},
		GoTypes:           file_extensions_proto_goTypes,
		DependencyIndexes: file_extensions_proto_depIdxs,
		EnumInfos:         file_extensions_proto_enumTypes,
		ExtensionInfos:    file_extensions_proto_extTypes,
	}.Build()
	File_extensions_proto = out.File
	file_extensions_proto_rawDesc = nil
	file_extensions_proto_goTypes = nil
	file_extensions_proto_depIdxs = nil
}
